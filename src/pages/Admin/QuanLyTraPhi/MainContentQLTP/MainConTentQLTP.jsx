import TableAdmin from "../../../../components/Admin/TableAdmin/TableAdmin";
import { useEffect, useMemo, useState } from "react";
import Search from "../../../../components/Admin/Search/Search";
import Delete from "../../../../components/Admin/Delete/Delete";
import Edit from "../../../../components/Admin/Edit/Edit";
import ExportModal from "../../../../components/ExportModal/ExportModal";
import Add from "../../../../components/Admin/Add/Add";
import "./MainContentQLTP.css";

/* ===== Helpers ng√†y VN ===== */
const parseVN = (dmy) => {
  if (!dmy) return null;
  const [d, m, y] = dmy.split("/").map(Number);
  return new Date(y, (m || 1) - 1, d || 1);
};
const fmtVN = (d) => d.toLocaleDateString("vi-VN");

/* ===== Fallback g√≥i n·∫øu ch∆∞a c√≥ b·∫£ng goiTraPhi ===== */
const FALLBACK_PACKS = [
  { idGoi: "BASIC1", tenGoi: "1 th√°ng", thoiHan: 30 },
  { idGoi: "PRO1Y", tenGoi: "1 nƒÉm", thoiHan: 365 },
];

const PLACEHOLDER_AVT = "https://via.placeholder.com/40";

/* ===== Join d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng ===== */
function buildRows() {
  const subs = JSON.parse(localStorage.getItem("goiTraPhiCuaNguoiDung") || "[]");
  const users = JSON.parse(localStorage.getItem("nguoiDung") || "[]");
  const packs =
    JSON.parse(localStorage.getItem("goiTraPhi") || "null")?.length
      ? JSON.parse(localStorage.getItem("goiTraPhi"))
      : FALLBACK_PACKS;

  const today = new Date();

  return subs.map((s) => {
    const u = users.find((x) => x.idNguoiDung === s.idNguoiDung);
    const p = packs.find((x) => x.idGoi === s.idGoi);
    const end = parseVN(s.NgayKetThuc);

    let status = "Kh√¥ng x√°c ƒë·ªãnh";
    if (end) status = end >= today ? "ƒêang ho·∫°t ƒë·ªông" : "H·∫øt h·∫°n";

    return {
      id: s.idGTPCND,                  // d√πng l√†m kho√° & xo√°/s·ª≠a
      image: u?.anhDaiDien || PLACEHOLDER_AVT,
      username: u?.tenNguoiDung || `User ${s.idNguoiDung}`,
      idNguoiDung: s.idNguoiDung,
      package: p?.tenGoi || s.idGoi,
      idGoi: s.idGoi,
      status,
      created: s.NgayBatDau,
      endDate: s.NgayKetThuc,
    };
  });
}

/* ===== L·∫•y th√≤i h·∫°n theo idGoi ===== */
function getThoiHanById(idGoi) {
  const packs =
    JSON.parse(localStorage.getItem("goiTraPhi") || "null")?.length
      ? JSON.parse(localStorage.getItem("goiTraPhi"))
      : FALLBACK_PACKS;
  return packs.find((p) => p.idGoi === idGoi)?.thoiHan ?? 0;
}

const MainContentQLTP = () => {
  /* ===== Columns hi·ªÉn th·ªã b·∫£ng ===== */
  const ColumnsTable = [
    { name: "ID", key: "id" },
    { name: "T√™n ng∆∞·ªùi d√πng", key: "username" },
    { name: "G√≥i h·ªçc", key: "package" },
    { name: "Tr·∫°ng th√°i", key: "status" },
    { name: "Ng√†y ƒëƒÉng k√Ω", key: "created" },
    { name: "Ng√†y h·∫øt h·∫°n", key: "endDate" },
  ];

  /* ===== Columns cho form Add/Edit (l√†m vi·ªác theo d·ªØ li·ªáu th·∫≠t) ===== */
  const ColumnsForm = [
    { name: "ID ng∆∞·ªùi d√πng", key: "idNguoiDung" },
    { name: "ID g√≥i (idGoi)", key: "idGoi" },
    { name: "Ng√†y b·∫Øt ƒë·∫ßu (dd/mm/yyyy)", key: "NgayBatDau" },
    // Ng√†y k·∫øt th√∫c s·∫Ω t√≠nh t·ª´ thoiHan c·ªßa g√≥i ‚Üí kh√¥ng cho nh·∫≠p
  ];

  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);

  /* Delete dialog */
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [deleteId, setDeleteId] = useState(null);

  /* Add/Edit dialog */
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showEdit, setShowEdit] = useState(false);
  const [selectedRow, setSelectedRow] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false); // gi·ªØ API theo component Edit hi·ªán c√≥

  /* Export modal */
  const [exportModal, setExportModal] = useState(false);

  /* ===== Load t·ª´ localStorage ===== */
  const reload = () => {
    const rows = buildRows();
    setData(rows);
    setFilteredData(rows);
  };

  useEffect(() => {
    reload();

    // c·∫≠p nh·∫≠t realtime khi tab kh√°c ghi subscription
    const onStorage = (e) => {
      if (e.key === "goiTraPhiCuaNguoiDung" || e.key === "nguoiDung" || e.key === "goiTraPhi") {
        reload();
      }
    };
    window.addEventListener("storage", onStorage);
    return () => window.removeEventListener("storage", onStorage);
  }, []);

  /* ===== Actions b·∫£ng ===== */
  const handleDelete = (id) => {
    setDeleteId(id);
    setShowDeleteDialog(true);
  };

  const onConfirmDelete = (id) => {
    const subs = JSON.parse(localStorage.getItem("goiTraPhiCuaNguoiDung") || "[]");
    const newSubs = subs.filter((x) => x.idGTPCND !== id);
    localStorage.setItem("goiTraPhiCuaNguoiDung", JSON.stringify(newSubs));

    setShowDeleteDialog(false);
    setDeleteId(null);
    reload();
  };

  const handleEdit = (id) => {
    const row = data.find((x) => x.id === id);
    if (!row) return;
    // Chu·∫©n ho√° d·ªØ li·ªáu cho form Edit
    setSelectedRow({
      id: row.id,
      idNguoiDung: row.idNguoiDung,
      idGoi: row.idGoi,
      NgayBatDau: row.created,
    });
    setShowEdit(true);
    setIsEditMode(false);
  };

  const handleUserDetailClose = () => {
    setShowEdit(false);
    setSelectedRow(null);
    setIsEditMode(false);
  };

  /* Edit save: update subs th·∫≠t r·ªìi reload */
  const handleUserDetailSave = (updated, flagIsEditMode = false) => {
    // Gi·ªØ t∆∞∆°ng th√≠ch API component Edit
    if (flagIsEditMode) {
      setIsEditMode(true);
      return;
    }
    if (!updated?.id || !updated?.idNguoiDung || !updated?.idGoi || !updated?.NgayBatDau) {
      alert("Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc (id, idNguoiDung, idGoi, NgayBatDau).");
      return;
    }

    const subs = JSON.parse(localStorage.getItem("goiTraPhiCuaNguoiDung") || "[]");
    const idx = subs.findIndex((x) => x.idGTPCND === updated.id);
    if (idx < 0) {
      alert("Kh√¥ng t√¨m th·∫•y b·∫£n ghi c·∫ßn s·ª≠a.");
      return;
    }

    // T√≠nh l·∫°i ng√†y k·∫øt th√∫c theo g√≥i
    const thoiHan = getThoiHanById(updated.idGoi);
    const start = parseVN(updated.NgayBatDau) || new Date();
    const end = new Date(start);
    end.setDate(end.getDate() + thoiHan);

    subs[idx] = {
      ...subs[idx],
      idNguoiDung: updated.idNguoiDung,
      idGoi: updated.idGoi,
      NgayBatDau: fmtVN(start),
      NgayKetThuc: fmtVN(end),
    };
    localStorage.setItem("goiTraPhiCuaNguoiDung", JSON.stringify(subs));

    handleUserDetailClose();
    reload();
  };

  /* Add */
  const handleAddUser = () => setShowAddDialog(true);
  const handleAddClose = () => setShowAddDialog(false);

  const handleAddSave = (payload) => {
    // payload mong mu·ªën: { idNguoiDung, idGoi, NgayBatDau }
    if (!payload?.idNguoiDung || !payload?.idGoi || !payload?.NgayBatDau) {
      alert("Vui l√≤ng nh·∫≠p: ID ng∆∞·ªùi d√πng, ID g√≥i, Ng√†y b·∫Øt ƒë·∫ßu (dd/mm/yyyy).");
      return;
    }

    const thoiHan = getThoiHanById(payload.idGoi);
    if (!thoiHan) {
      alert("ID g√≥i kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu thoiHan.");
      return;
    }

    const start = parseVN(payload.NgayBatDau) || new Date();
    const end = new Date(start);
    end.setDate(end.getDate() + thoiHan);

    const subs = JSON.parse(localStorage.getItem("goiTraPhiCuaNguoiDung") || "[]");
    const newSub = {
      idGTPCND: "SUB" + Date.now(),
      idNguoiDung: payload.idNguoiDung,
      idGoi: payload.idGoi,
      NgayBatDau: fmtVN(start),
      NgayKetThuc: fmtVN(end),
    };
    subs.push(newSub);
    localStorage.setItem("goiTraPhiCuaNguoiDung", JSON.stringify(subs));

    handleAddClose();
    reload();
  };

  /* ===== H√†nh ƒë·ªông cell ===== */
  const Action = useMemo(
    () => [
      {
        name: "üëÄ",
        class: "edit-button",
        style: { cursor: "pointer", marginRight: 8, fontSize: "1.2rem" },
        onClick: (id) => () => handleEdit(id),
      },
      {
        name: "üóëÔ∏è",
        class: "delete-button",
        style: { cursor: "pointer", fontSize: "1.2rem" },
        onClick: (id) => () => handleDelete(id),
      },
    ],
    [data]
  );

  return (
    <div className="main-content-admin-user">
      <h1>Qu·∫£n L√Ω Tr·∫£ Ph√≠</h1>

      <div className="user-actions">
        <div className="user-actions-buttons">
          <button className="btn btn-primary" onClick={handleAddUser}>
            Th√™m
          </button>
          <button className="btn btn-secondary" onClick={() => setExportModal(true)}>
            Xu·∫•t
          </button>
        </div>

        {/* Search d√πng data hi·ªÉn th·ªã */}
        <Search Data={data} onResult={setFilteredData} />
      </div>

      <TableAdmin Colums={ColumnsTable} Data={filteredData} Action={Action} />

      {/* Delete dialog */}
      {showDeleteDialog && (
        <Delete
          id={deleteId}
          onClose={() => {
            setShowDeleteDialog(false);
            setDeleteId(null);
          }}
          onConfirm={onConfirmDelete}
          message="B·∫°n c√≥ mu·ªën x√≥a b·∫£n ghi tr·∫£ ph√≠ n√†y kh√¥ng?"
        />
      )}

      {/* Edit dialog (l√†m vi·ªác theo d·ªØ li·ªáu th·∫≠t) */}
      {showEdit && selectedRow && (
        <Edit
          user={selectedRow}
          onClose={handleUserDetailClose}
          onSave={handleUserDetailSave}
          isEditMode={isEditMode}
          Colums={ColumnsForm}
          showAvatar={false}
        />
      )}

      {/* Add dialog */}
      {showAddDialog && (
        <Add
          onClose={handleAddClose}
          onSave={handleAddSave}
          Colums={ColumnsForm}
          showAvatar={false}
        />
      )}

      {/* Export */}
      {exportModal && (
        <ExportModal
          isOpen={exportModal}
          onClose={() => setExportModal(false)}
          onExport={(rows) => {
            // tu·ª≥ app c·ªßa b·∫°n, ·ªü ƒë√¢y ch·ªâ log
            console.log("D·ªØ li·ªáu export:", rows);
          }}
          filteredData={filteredData}
          title="Xu·∫•t danh s√°ch tr·∫£ ph√≠"
          columns={ColumnsTable}
        />
      )}
    </div>
  );
};

export default MainContentQLTP;

// src/pages/Admin/QuanLyTraPhi/QuanLyGoiTraPhi.jsx
import { useEffect, useState, useMemo } from "react";
import TableAdmin from "../../../../components/Admin/TableAdmin/TableAdmin";
import Search from "../../../../components/Admin/Search/Search";
import Delete from "../../../../components/Admin/Delete/Delete";
import Edit from "../../../../components/Admin/Edit/Edit";
import Add from "../../../../components/Admin/Add/Add";

import { db } from "../../../../../lib/firebase";
import {
  collection,
  onSnapshot,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  getDoc,
  getDocs,
  query,
  where,
} from "firebase/firestore";
import * as Yup from "yup";

/* ====== Helpers ====== */
const VN = "vi-VN";
const genIdGoi = () => "GOI_" + Date.now();
const toNum = (v, d = 0) => {
  const n = Number(v);
  return Number.isFinite(n) ? n : d;
};

// Date helpers cho ki·ªÉm tra sub c√≤n ho·∫°t ƒë·ªông khi xo√° g√≥i
const parseVN = (dmy) => {
  if (!dmy || typeof dmy !== "string") return null;
  const [d, m, y] = dmy.split("/").map(Number);
  if (!d || !m || !y) return null;
  const dt = new Date(y, (m || 1) - 1, d || 1);
  return Number.isNaN(dt.getTime()) ? null : dt;
};
const toDateFlexible = (v) => {
  if (!v) return null;
  if (v instanceof Date) return v;
  if (typeof v?.toDate === "function") return v.toDate(); // Timestamp
  if (typeof v === "string") return parseVN(v) || new Date(v);
  return null;
};
const today0 = () => {
  const t = new Date();
  t.setHours(0, 0, 0, 0);
  return t;
};
const isActiveSub = (sub) => {
  if (String(sub?.status || "").toLowerCase().includes("h·ªßy")) return false;
  const end = toDateFlexible(sub?.NgayKetThuc);
  return !!end && end >= today0();
};

const makeRows = (docs) =>
  docs.map((p) => {
    const gia = toNum(p.giaGoi);
    const gg = toNum(p.giamGia);
    const after = Math.max(0, Math.round(gia * (1 - gg / 100)));
    return {
      id: p._docId,                 // docId d√πng cho Edit/Delete
      idGoi: p.idGoi || p._docId,   // hi·ªÉn th·ªã m√£ g√≥i
      tenGoi: p.tenGoi || "",
      moTa: p.moTa || "",
      giaGoi: gia,
      giamGia: gg,
      thoiHan: toNum(p.thoiHan),
      giaGoiFmt: gia.toLocaleString(VN),
      giaSauGiamFmt: after.toLocaleString(VN),
    };
  });

/* ====== Yup schemas (Edit/Add d√πng chung) ====== */
const numberFromText = (msg) =>
  Yup.number()
    .transform((val, orig) => {
      // Chu·∫©n ho√° chu·ªói s·ªë: '' -> NaN; ' 120 ' -> 120
      const s = String(orig ?? "").trim();
      if (s === "") return NaN;
      const n = Number(s);
      return Number.isFinite(n) ? n : NaN;
    })
    .typeError(msg);

const PlanSchemaBase = Yup.object({
  tenGoi: Yup.string().trim().required("Nh·∫≠p t√™n g√≥i"),
  moTa: Yup.string().trim().max(500, "M√¥ t·∫£ t·ªëi ƒëa 500 k√Ω t·ª±").nullable(),
  giaGoi: numberFromText("Gi√° ph·∫£i l√† s·ªë").min(0, "Gi√° ‚â• 0").required("Nh·∫≠p gi√°"),
  giamGia: numberFromText("Gi·∫£m gi√° ph·∫£i l√† s·ªë")
    .min(0, "Gi·∫£m gi√° ‚â• 0")
    .max(100, "Gi·∫£m gi√° ‚â§ 100")
    .required("Nh·∫≠p gi·∫£m gi√°"),
  thoiHan: numberFromText("Th·ªùi h·∫°n (ng√†y) ph·∫£i l√† s·ªë")
    .integer("Th·ªùi h·∫°n ph·∫£i l√† s·ªë nguy√™n")
    .min(1, "Th·ªùi h·∫°n ‚â• 1 ng√†y")
    .required("Nh·∫≠p th·ªùi h·∫°n"),
});

const PlanEditSchema = PlanSchemaBase.shape({
  id: Yup.string().required(),
});

const PlanAddSchema = PlanSchemaBase; // kh√¥ng c·∫ßn id

export default function QuanLyGoiTraPhi() {
  /* ====== C·ªôt b·∫£ng & form ====== */
  const columnsTable = useMemo(() => ([
    { name: "ID g√≥i", key: "idGoi" },
    { name: "T√™n g√≥i", key: "tenGoi" },
    { name: "M√¥ t·∫£", key: "moTa" },
    { name: "Gi√° (ƒë)", key: "giaGoiFmt" },
    { name: "Gi·∫£m (%)", key: "giamGia" },
    { name: "Gi√° sau gi·∫£m (ƒë)", key: "giaSauGiamFmt" },
    { name: "Th·ªùi h·∫°n (ng√†y)", key: "thoiHan" },
  ]), []);

  const columnsForm = useMemo(() => ([
    { name: "T√™n g√≥i", key: "tenGoi" },
    { name: "M√¥ t·∫£", key: "moTa" },
    { name: "Gi√° (ƒë)", key: "giaGoi" },
    { name: "Gi·∫£m gi√° (%)", key: "giamGia" },
    { name: "Th·ªùi h·∫°n (ng√†y)", key: "thoiHan" },
  ]), []);

  /* ====== State ====== */
  const [rows, setRows] = useState([]);
  const [filtered, setFiltered] = useState([]);

  // Modal/Xo√°/S·ª≠a/Th√™m
  const [showDelete, setShowDelete] = useState(false);
  const [deleteId, setDeleteId] = useState(null);

  const [showEdit, setShowEdit] = useState(false);
  const [editData, setEditData] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false);

  const [showAdd, setShowAdd] = useState(false);

  /* ====== Realtime ====== */
  useEffect(() => {
    const un = onSnapshot(collection(db, "goiTraPhi"), (snap) => {
      const docs = snap.docs.map((d) => ({ _docId: d.id, ...d.data() }));
      const r = makeRows(docs);
      setRows(r);
      setFiltered(r);
    });
    return () => un();
  }, []);

  /* ====== Delete ====== */
  const askDelete = (id) => {
    setDeleteId(id);
    setShowDelete(true);
  };
  const closeDelete = () => {
    setShowDelete(false);
    setDeleteId(null);
  };

  // ki·ªÉm tra sub tham chi·∫øu, ch·ªâ xo√° khi kh√¥ng c√≤n sub ƒëang ho·∫°t ƒë·ªông
  const confirmDelete = async (idFromModal) => {
    const planDocId = idFromModal ?? deleteId;
    if (!planDocId) return;

    try {
      const planSnap = await getDoc(doc(db, "goiTraPhi", planDocId));
      if (!planSnap.exists()) {
        closeDelete();
        return;
      }
      const plan = { _docId: planSnap.id, ...planSnap.data() };
      const customId = String(plan.idGoi || plan._docId);

      const subsCol = collection(db, "goiTraPhiCuaNguoiDung");
      const q1 = query(subsCol, where("idGoi", "==", customId));
      const q2Needed = customId !== plan._docId;
      const q2 = q2Needed ? query(subsCol, where("idGoi", "==", plan._docId)) : null;

      const [s1, s2] = await Promise.all([getDocs(q1), q2 ? getDocs(q2) : Promise.resolve(null)]);
      const allRefs = [
        ...(s1?.docs || []),
        ...((s2 && s2.docs) || []),
      ].map((d) => ({ _docId: d.id, ...d.data() }));

      const activeRefs = allRefs.filter(isActiveSub);
      if (activeRefs.length > 0) {
        alert(
          `Kh√¥ng th·ªÉ xo√° v√¨ c√≤n ${activeRefs.length} ƒëƒÉng k√Ω ƒëang ho·∫°t ƒë·ªông cho g√≥i n√†y.\n` +
          `H√£y hu·ª∑ ho·∫∑c ch·ªù h·∫øt h·∫°n c√°c ƒëƒÉng k√Ω tr∆∞·ªõc.`
        );
        closeDelete();
        return;
      }

      await deleteDoc(doc(db, "goiTraPhi", planDocId));
      closeDelete();
    } catch (e) {
      console.error(e);
      alert("Xo√° g√≥i th·∫•t b·∫°i.");
    }
  };

  /* ====== Edit ====== */
  const openEdit = (id) => {
    const row = rows.find((x) => String(x.id) === String(id));
    if (!row) return;
    setEditData({
      id: row.id,
      tenGoi: row.tenGoi,
      moTa: row.moTa,
      giaGoi: String(row.giaGoi),  // gi·ªØ d·∫°ng text ƒë·ªÉ Edit validate
      giamGia: String(row.giamGia),
      thoiHan: String(row.thoiHan),
    });
    setIsEditMode(false);
    setShowEdit(true);
  };
  const closeEdit = () => {
    setShowEdit(false);
    setEditData(null);
    setIsEditMode(false);
  };
  const saveEdit = async (payload, isEditFlag) => {
    if (isEditFlag) {
      setIsEditMode(true);
      return;
    }
    try {
      const parsed = await PlanEditSchema.validate(payload, { abortEarly: false });
      await updateDoc(doc(db, "goiTraPhi", parsed.id), {
        tenGoi: String(parsed.tenGoi || "").trim(),
        moTa: String(parsed.moTa || "").trim(),
        giaGoi: Number(parsed.giaGoi),
        giamGia: Number(parsed.giamGia),
        thoiHan: Number(parsed.thoiHan),
      });
      closeEdit();
    } catch (e) {
      if (e?.name === "ValidationError") {
        // L·ªói field ƒë√£ hi·ªÉn th·ªã ·ªü ngay d∆∞·ªõi √¥ trong Edit.jsx
        return;
      }
      console.error(e);
      alert("C·∫≠p nh·∫≠t g√≥i th·∫•t b·∫°i.");
    }
  };

  /* ====== Add ====== */
  const openAdd = () => setShowAdd(true);
  const closeAdd = () => setShowAdd(false);
  const saveAdd = async (p) => {
    try {
      const parsed = await PlanAddSchema.validate(p, { abortEarly: false });
      await addDoc(collection(db, "goiTraPhi"), {
        idGoi: genIdGoi(),
        tenGoi: String(parsed.tenGoi || "").trim(),
        moTa: String(parsed.moTa || "").trim(),
        giaGoi: Number(parsed.giaGoi),
        giamGia: Number(parsed.giamGia),
        thoiHan: Number(parsed.thoiHan),
      });
      closeAdd();
    } catch (e) {
      if (e?.name === "ValidationError") {
        // Add.jsx ch∆∞a hi·ªÉn th·ªã l·ªói d∆∞·ªõi √¥, n√™n b√°o g·ªçn:
        alert(e.errors?.[0] || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.");
        return;
      }
      console.error(e);
      alert("Th√™m g√≥i th·∫•t b·∫°i.");
    }
  };

  /* ====== Action cho b·∫£ng (TableAdmin) ====== */
  const Action = [
    { name: "üëÄ", title: "S·ª≠a", onClick: (id) => openEdit(id) },
    { name: "üóëÔ∏è", title: "Xo√°", onClick: (id) => askDelete(id) },
  ];

  return (
    <div className="main-content-admin-user">
      <h2>Qu·∫£n l√Ω g√≥i tr·∫£ ph√≠</h2>

      <div className="user-actions">
        <div className="user-actions-buttons">
          <button className="btn btn-primary" onClick={openAdd}>Th√™m g√≥i</button>
        </div>
        <Search Data={rows} onResult={setFiltered} />
      </div>

      <TableAdmin Colums={columnsTable} Data={filtered} Action={Action} />

      {/* Xo√° */}
      {showDelete && (
        <Delete
          id={deleteId}
          onClose={closeDelete}
          onConfirm={confirmDelete}
          message="B·∫°n c√≥ mu·ªën xo√° g√≥i tr·∫£ ph√≠ n√†y kh√¥ng?"
        />
      )}

      {/* S·ª≠a (hi·ªÉn th·ªã l·ªói ngay d∆∞·ªõi √¥ nh·ªù Edit + Yup) */}
      {showEdit && editData && (
        <Edit
          user={editData}
          onClose={closeEdit}
          onSave={saveEdit}
          isEditMode={isEditMode}
          Colums={columnsForm}
          showAvatar={false}
          validationSchema={PlanEditSchema}
          validateOnChange={true}
        />
      )}

      {/* Th√™m (validate tr∆∞·ªõc khi l∆∞u; n·∫øu mu·ªën l·ªói d∆∞·ªõi √¥, c√≥ th·ªÉ chuy·ªÉn sang d√πng Edit ·ªü ch·∫ø ƒë·ªô "th√™m") */}
      {showAdd && (
        <Add
          onClose={closeAdd}
          onSave={saveAdd}
          Colums={columnsForm}
          showAvatar={false}
          validationSchema={PlanAddSchema}
          validateOnChange={true}
        />
      )}
    </div>
  );
}
